{"mappings":"IAgBAA,EAhBA,WACE,MAAMC,EAAQC,SAASC,eAAe,SAChCC,EAAYF,SAASG,cAAc,eAEnCC,EAAcL,EAAMM,MAAMC,cAEhCJ,EAAUK,UAAY,GAEtB,IAAK,IAAIC,EAAI,EAAGA,EAAIJ,EAAYK,OAAQD,IAAK,CAC3C,MAAME,EAASV,SAASW,cAAc,QACtCD,EAAOE,YAAcR,EAAYI,GACjCE,EAAOG,UAAUC,IAAI,UACrBZ,EAAUa,YAAYL,E,OCc1BM,EAxBA,WACE,IAAIC,EAAiB,KAiBrB,OADFC,QAAQC,IAAIC,GACH,C,gBAfP,SAAyBV,GAEA,OAAnBO,GAA2BA,IAAmBP,IAChDO,EAAeJ,UAAUQ,OAAO,YAChCD,EAAgBE,OAAOL,IAGzBP,EAAOG,UAAUU,OAAO,YAExBN,EAAiBP,EAAOG,UAAUW,SAAS,YAAcd,EAAS,KAC9DO,GACFG,EAAgBN,IAAIG,E,kBAMtBG,E,MCDJK,EApBA,SAA+BvB,GAiB7BA,EAAUwB,iBAAiB,SAN3B,SAAyBC,GATzB,IAAyBjB,EAUnBiB,EAAMC,SAAWD,EAAME,OAAOhB,UAAUW,SAAS,aAV9Bd,EAWLiB,EAAME,QAVjBhB,UAAUU,OAAO,YACpBb,EAAOG,UAAUW,SAAS,YAC5BJ,EAAgBN,IAAIJ,GAEpBU,EAAgBE,OAAOZ,G,SC4D7BoB,EAnEA,SAA6BC,EAAQC,EAAQ9B,GAC3C,MAAM+B,EAAgBjC,SAASW,cAAc,OAC7CsB,EAAcpB,UAAUC,IAAI,kBAC5BmB,EAAcC,MAAMC,SAAW,WAC/BF,EAAcC,MAAME,KAAOL,EAAS,KACpCE,EAAcC,MAAMG,IAAML,EAAS,KACnCC,EAAcC,MAAMI,MAAQ,IAC5BL,EAAcC,MAAMK,OAAS,IAE7BrC,EAAUa,YAAYkB,GAEtB,IAAIO,GAA0B,EAC1BC,EAAc,CAAEC,EAAGX,EAAQY,EAAGX,GAC9BY,EAAY,CAAEF,EAAGX,EAAQY,EAAGX,GAsBhC,SAASa,EAAgBlB,GACvB,IAAKa,EAAyB,OAE9BI,EAAY,CAAEF,EAAGf,EAAMmB,QAASH,EAAGhB,EAAMoB,SAEzC,MAAMT,EAAQM,EAAUF,EAAID,EAAYC,EAClCH,EAASK,EAAUD,EAAIF,EAAYE,EACzCV,EAAcC,MAAME,KAAOY,KAAKC,IAAIR,EAAYC,EAAGE,EAAUF,GAAK,KAClET,EAAcC,MAAMG,IAAMW,KAAKC,IAAIR,EAAYE,EAAGC,EAAUD,GAAK,KACjEV,EAAcC,MAAMI,MAAQU,KAAKE,IAAIZ,GAAS,KAC9CL,EAAcC,MAAMK,OAASS,KAAKE,IAAIX,GAAU,KA7BhCvC,SAASmD,iBAAiB,WAElCC,SAAQ1C,IACd,MAAM2C,EAAO3C,EAAO4C,wBAGlBD,EAAKjB,KAAOY,KAAKO,IAAId,EAAYC,EAAGE,EAAUF,IAC9CW,EAAKG,MAAQR,KAAKC,IAAIR,EAAYC,EAAGE,EAAUF,IAC/CW,EAAKhB,IAAMW,KAAKO,IAAId,EAAYE,EAAGC,EAAUD,IAC7CU,EAAKI,OAAST,KAAKC,IAAIR,EAAYE,EAAGC,EAAUD,IAEhDjC,EAAOG,UAAUC,IAAI,iBACrBM,EAAgBN,IAAIJ,IAEpBA,EAAOG,UAAUQ,OAAO,gBAAgB,G,CAiC9CnB,EAAUwB,iBAAiB,aAb3B,SAAyBC,GACvBT,QAAQC,IAAI,0BACRQ,EAAME,OAAOhB,UAAUW,SAAS,YACpCgB,GAA0B,EAC1BC,EAAc,CAAEC,EAAGf,EAAMmB,QAASH,EAAGhB,EAAMoB,SAC3C/C,SAAS0B,iBAAiB,YAAamB,G,IASzC7C,SAAS0B,iBAAiB,WAN1B,WACEc,GAA0B,EAC1BxC,SAAS0D,oBAAoB,YAAab,E,SCtD9Cc,EAPA,SAAwBhC,EAAOzB,GAC7B,IAAKyB,EAAME,OAAOhB,UAAUW,SAAS,UAAW,CAC9BtB,EAAUiD,iBAAiB,WACnCC,SAAQ1C,GAAUA,EAAOG,UAAUQ,OAAO,a,GCEtD,MAAMD,EAAkB,IAAIwC,IAG5B,SAASC,IACP,MAAM3D,EAAYF,SAASG,cAAc,eAGzC2B,EAAoB,EAAG,EAAG5B,GAE1BA,EAAUiD,iBAAiB,WAAWC,SAAQ1C,IAC5CA,EAAOgB,iBAAiB,SAASC,IAC/B,MAAME,EAASF,EAAME,QAEhBF,EAAMC,SAAWC,EAAOhB,UAAUW,SAAS,UAC9CR,IAA8B8C,gBAAgBjC,GAE9CJ,EAAsBvB,EAAU,GAElC,IAGJF,SAAS0B,iBAAiB,SAASC,IAC5BzB,EAAUsB,SAASG,EAAME,SAAYF,EAAMC,UAC9CE,EAAoB,EAAG,EAAG5B,GAC1ByD,EAAehC,EAAOzB,G,IAvB5BgB,QAAQC,IAAIC,G,ICwDZ2C,EA5DA,WACE,IACIC,EAAeC,EADfC,GAAa,EAEbC,EAAmB,IAAIC,IAgC3B,SAASC,EAAY1C,GACnB,GAAIuC,EAAY,CACd,MAAMI,EAAS3C,EAAMmB,QAAUkB,EACzBO,EAAS5C,EAAMoB,QAAUkB,EAE/B7C,EAAgBgC,SAAQ1C,IACtB,MAAM8D,EAAkBL,EAAiBM,IAAI/D,GACvCgE,EAAUF,EAAgB9B,EAAI4B,EAC9BK,EAASH,EAAgB7B,EAAI4B,EACnC7D,EAAOwB,MAAME,KAAO,GAAGsC,MACvBhE,EAAOwB,MAAMG,IAAM,GAAGsC,KAAU,G,EAKtC,SAASC,IACPV,GAAa,EACbC,EAAiBU,QACjBzD,EAAgByD,QAEhB7E,SAAS0D,oBAAoB,YAAaW,GAC1CrE,SAAS0D,oBAAoB,UAAWkB,E,CAnDA5E,SAAjC0B,iBAAiB,aAE1B,SAAqBC,GACnB,MAAME,EAASF,EAAME,OACfiD,EAAuBC,MAAMC,KAAK5D,GAGtC0D,EAAqBrE,OAAS,GAC9BoB,EAAOhB,UAAUW,SAAS,YACzBG,EAAMC,UAEPsC,GAAa,EAEbF,EAAgBrC,EAAMmB,QACtBmB,EAAgBtC,EAAMoB,QAEtB+B,EAAqB1B,SAAQ1C,IAC3B,MAAM2C,EAAO3C,EAAO4C,wBACd2B,EAAW5B,EAAKjB,KAChB8C,EAAW7B,EAAKhB,IACtB8B,EAAiBgB,IAAIzE,EAAQ,CAAEgC,EAAGuC,EAAUtC,EAAGuC,IAC/CxE,EAAOwB,MAAMC,SAAW,WACxBzB,EAAOwB,MAAMkD,OAAS,MAAM,IAG9BpF,SAAS0B,iBAAiB,YAAa2C,GACvCrE,SAAS0B,iBAAiB,UAAWkD,G,KC7BvB5E,SAASG,cAAc,WAC/BuB,iBAAiB,SAASC,IACpC7B,IACA+D,IACAE,GAAqB","sources":["src/js/showEnteredText.js","src/js/selectSingleLetter.js","src/js/selectMultipleLetters.js","src/js/createSelectionRect.js","src/js/clearSelection.js","src/js/selectSettings.js","src/js/moveSelectedLetters.js","src/js/index.js"],"sourcesContent":["function showEnteredText() {\n  const input = document.getElementById('input');\n  const textField = document.querySelector('.text-field');\n\n  const enteredText = input.value.toLowerCase();\n\n  textField.innerHTML = '';\n\n  for (let i = 0; i < enteredText.length; i++) {\n    const letter = document.createElement('span');\n    letter.textContent = enteredText[i];\n    letter.classList.add('letter');\n    textField.appendChild(letter);\n  }\n}\n\nexport default showEnteredText;\n","import { selectedLetters } from './selectSettings';\n\nfunction selectSingleLetter() {\n  let selectedLetter = null;\n\n  function toggleSelection(letter) {\n    // Вместо добавления класса selected, вы можете поместить буквы в массив\n    if (selectedLetter !== null && selectedLetter !== letter) {\n      selectedLetter.classList.remove('selected');\n      selectedLetters.delete(selectedLetter); // Удаление буквы из массива\n    }\n\n    letter.classList.toggle('selected');\n\n    selectedLetter = letter.classList.contains('selected') ? letter : null;\n    if (selectedLetter) {\n      selectedLetters.add(selectedLetter); // Добавление буквы в массив\n    }\n  }\nconsole.log(selectedLetters);\n  return {\n    toggleSelection,\n    selectedLetters,\n  };\n}\n\nexport default selectSingleLetter;\n\n","import { selectedLetters } from \"./selectSettings\";\nfunction selectMultipleLetters(textField) {\n  \n  function toggleSelection(letter) {\n    letter.classList.toggle('selected');\n    if (letter.classList.contains('selected')) {\n      selectedLetters.add(letter); // Добавляем выделенную букву в коллекцию\n    } else {\n      selectedLetters.delete(letter); // Удаляем выделенную букву из коллекции\n    }\n  }\n\n  function highlightLetter(event) {\n    if (event.ctrlKey && event.target.classList.contains('letter')) {\n      toggleSelection(event.target);\n    }\n  }\n\n  textField.addEventListener('click', highlightLetter);\n}\n\nexport default selectMultipleLetters;\n\n\n\n\n","import { selectedLetters } from './selectSettings';\nfunction createSelectionRect(startX, startY, textField) {\n  const selectionRect = document.createElement('div');\n  selectionRect.classList.add('selection-rect');\n  selectionRect.style.position = 'absolute';\n  selectionRect.style.left = startX + 'px';\n  selectionRect.style.top = startY + 'px';\n  selectionRect.style.width = '0';\n  selectionRect.style.height = '0';\n  \n  textField.appendChild(selectionRect);\n\n  let isCreatingSelectionRect = false;\n  let startCoords = { x: startX, y: startY };\n  let endCoords = { x: startX, y: startY };\n\n  function highlightText() {\n    const letters = document.querySelectorAll('.letter');\n\n    letters.forEach(letter => {\n      const rect = letter.getBoundingClientRect();\n\n      if (\n        rect.left < Math.max(startCoords.x, endCoords.x) &&\n        rect.right > Math.min(startCoords.x, endCoords.x) &&\n        rect.top < Math.max(startCoords.y, endCoords.y) &&\n        rect.bottom > Math.min(startCoords.y, endCoords.y)\n      ) {\n        letter.classList.add('selected-rect');\n        selectedLetters.add(letter);\n      } else {\n        letter.classList.remove('selected-rect');\n      }\n    });\n  }\n\n  function updateSelection(event) {\n    if (!isCreatingSelectionRect) return;\n\n    endCoords = { x: event.clientX, y: event.clientY };\n\n    const width = endCoords.x - startCoords.x;\n    const height = endCoords.y - startCoords.y;\n    selectionRect.style.left = Math.min(startCoords.x, endCoords.x) + 'px';\n    selectionRect.style.top = Math.min(startCoords.y, endCoords.y) + 'px';\n    selectionRect.style.width = Math.abs(width) + 'px';\n    selectionRect.style.height = Math.abs(height) + 'px';\n\n    highlightText();\n  }\n\n  function handleMouseDown(event) {\n    console.log('handleMouseDown called');\n    if (event.target.classList.contains('letter')) return;\n    isCreatingSelectionRect = true;\n    startCoords = { x: event.clientX, y: event.clientY };\n    document.addEventListener('mousemove', updateSelection);\n  }\n\n  function handleMouseUp() {\n    isCreatingSelectionRect = false;\n    document.removeEventListener('mousemove', updateSelection);\n  }\n\n  textField.addEventListener('mousedown', handleMouseDown);\n  document.addEventListener('mouseup', handleMouseUp);\n}\n\nexport default createSelectionRect;\n","function clearSelection(event, textField) {\n  if (!event.target.classList.contains('letter')) {\n    const letters = textField.querySelectorAll('.letter');\n    letters.forEach(letter => letter.classList.remove('selected'));\n  }\n}\n\nexport default clearSelection;\n","import selectSingleLetter from './selectSingleLetter';\nimport selectMultipleLetters from './selectMultipleLetters';\nimport createSelectionRect from './createSelectionRect';\nimport clearSelection from './clearSelection';\n\nconst selectedLetters = new Set();\nconsole.log(selectedLetters);\n\nfunction selectSettings() {\n  const textField = document.querySelector('.text-field');\n\n  // Переносим вызов createSelectionRect в начало функции\n  createSelectionRect(0, 0, textField);\n\n  textField.querySelectorAll('.letter').forEach(letter => {\n    letter.addEventListener('click', event => {\n      const target = event.target;\n      // Вызываем createSelectionRect при клике на пустом месте без нажатия Ctrl\n      if (!event.ctrlKey && target.classList.contains('letter')) {\n        selectSingleLetter(textField).toggleSelection(target);\n      } else {\n        selectMultipleLetters(textField);\n      }\n    });\n  });\n\n  document.addEventListener('click', event => {\n    if (!textField.contains(event.target) && !event.ctrlKey) {\n      createSelectionRect(0, 0, textField);\n      clearSelection(event, textField);\n    }\n  });\n}\n\nexport { selectSettings, selectedLetters };\n","import { selectedLetters } from './selectSettings';\n\nfunction moveSelectedLetters() {\n  let isDragging = false;\n  let initialMouseX, initialMouseY;\n  let initialPositions = new Map(); // Сохраняем начальные координаты для каждой буквы\n\n  document.addEventListener('mousedown', onMouseDown);\n\n  function onMouseDown(event) {\n    const target = event.target;\n    const selectedLettersArray = Array.from(selectedLetters); // Создаем массив с текущим содержимым коллекции\n\n    if (\n      selectedLettersArray.length > 0 &&\n      target.classList.contains('letter') &&\n      !event.ctrlKey \n    ) {\n      isDragging = true;\n\n      initialMouseX = event.clientX;\n      initialMouseY = event.clientY;\n\n      selectedLettersArray.forEach(letter => {\n        const rect = letter.getBoundingClientRect();\n        const initialX = rect.left;\n        const initialY = rect.top;\n        initialPositions.set(letter, { x: initialX, y: initialY });\n        letter.style.position = 'absolute';\n        letter.style.zIndex = '1000';\n      });\n\n      document.addEventListener('mousemove', onMouseMove);\n      document.addEventListener('mouseup', onMouseUp);\n    }\n  }\n\n  function onMouseMove(event) {\n    if (isDragging) {\n      const deltaX = event.clientX - initialMouseX;\n      const deltaY = event.clientY - initialMouseY;\n\n      selectedLetters.forEach(letter => {\n        const initialPosition = initialPositions.get(letter);\n        const newLeft = initialPosition.x + deltaX;\n        const newTop = initialPosition.y + deltaY;\n        letter.style.left = `${newLeft}px`;\n        letter.style.top = `${newTop}px`;\n      });\n    }\n  }\n\n  function onMouseUp() {\n    isDragging = false;\n    initialPositions.clear();\n    selectedLetters.clear();\n\n    document.removeEventListener('mousemove', onMouseMove);\n    document.removeEventListener('mouseup', onMouseUp);\n  }\n}\n\nexport default moveSelectedLetters;\n","import showEnteredText from './showEnteredText.js';\nimport { selectSettings } from './selectSettings';\nimport moveSelectedLetters from './moveSelectedLetters.js';\n\nconst showTextBtn = document.querySelector('.button');\nshowTextBtn.addEventListener('click', event => {\n  showEnteredText();\n  selectSettings();\n  moveSelectedLetters(); \n});\n"],"names":["$ee1258cdfdb10be9$export$2e2bcd8739ae039","input","document","getElementById","textField","querySelector","enteredText","value","toLowerCase","innerHTML","i","length","letter","createElement","textContent","classList","add","appendChild","$e818855394d22686$export$2e2bcd8739ae039","selectedLetter","console","log","$4df8b946f656a514$export$55cc78cf0dc5aa15","remove","delete","toggle","contains","$00a5094cca4cb504$export$2e2bcd8739ae039","addEventListener","event","ctrlKey","target","$de94c5465e95ff5c$export$2e2bcd8739ae039","startX","startY","selectionRect","style","position","left","top","width","height","isCreatingSelectionRect","startCoords","x","y","endCoords","updateSelection","clientX","clientY","Math","min","abs","querySelectorAll","forEach","rect","getBoundingClientRect","max","right","bottom","removeEventListener","$3f366115d0725b9c$export$2e2bcd8739ae039","Set","$4df8b946f656a514$export$13e2f5017bdadde9","toggleSelection","$b9ebc0daf2ef80ce$export$2e2bcd8739ae039","initialMouseX","initialMouseY","isDragging","initialPositions","Map","onMouseMove","deltaX","deltaY","initialPosition","get","newLeft","newTop","onMouseUp","clear","selectedLettersArray","Array","from","initialX","initialY","set","zIndex"],"version":3,"file":"index.b955bfed.js.map"}